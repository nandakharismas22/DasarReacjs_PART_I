{"ast":null,"code":"var _jsxFileName = \"D:\\\\KULIYAH NDU\\\\MAGANG\\\\belajar mandiri\\\\week1\\\\Desert_Tour\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//PERCOBAAN 1 (Creating and nesting components )\n\n// function MyButton() {\n//   return (\n//     <button>\n//       Saya adalah tombol\n//     </button>\n//   );\n// }\n\n// export default function MyApp() {\n//   return (\n//     <div>\n//       <h1>Selamat datang di aplikasi saya</h1>\n//       <MyButton />\n//     </div>\n//   );\n// }\n\n//PERCOBAAN 2 (How to to add markup & styles Untuk mendisplay Data)\n\n// const user = {\n//   name: 'Nanda Kharisma Safitri',\n//   imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',\n//   imageSize: 90,\n// };\n\n// export default function Profile() {\n//   return (\n//     //markup\n//     <> \n//       <h1>{user.name}</h1>\n//       <img\n//         className=\"avatar\"\n//         src={user.imageUrl}\n//         alt={'Foto ' + user.name}\n//         style={{\n//           width: user.imageSize,\n//           height: user.imageSize\n//         }}\n//       />\n//     </>//markup\n//   );\n// }\n\n// PERCOBAAN 3 (How to render conditions and lists)\n// const products = [\n//   { title: 'Kubis', isFruit: false, id: 1 },  // Produk non-buah\n//   { title: 'Bawang Putih', isFruit: false, id: 2 },  // Produk non-buah\n//   { title: 'Apel', isFruit: true, id: 3 },  // Produk buah\n// ];\n\n// export default function ShoppingList() {\n//   // 1. Merender daftar produk menggunakan .map()\n//   //    - Di sini, `products.map()` digunakan untuk mengubah array `products` menjadi elemen-elemen <li> yang dapat ditampilkan dalam list.\n//   const listItems = products.map(product =>\n//     <li\n//       key={product.id}  // 2. Atribut key untuk mengidentifikasi item secara unik\n//       style={{\n//         // 3. Kondisi render: Memeriksa apakah produk adalah buah atau bukan dan mengubah warna teks berdasarkan kondisi tersebut.\n//         color: product.isFruit ? 'magenta' : 'darkgreen'  // Jika `isFruit` true, warna teks magenta, jika false, darkgreen.\n//       }}\n//     >\n//       {product.title}  {/* Menampilkan nama produk */}\n//     </li>\n//   );\n\n//   // 4. Merender daftar item sebagai <ul> dengan elemen <li> yang sudah dibuat sebelumnya\n//   return (\n//     <ul>{listItems}</ul>  // 5. Menampilkan seluruh daftar produk dalam sebuah unordered list (<ul>)\n//   );\n// }\n\n//PERCOBAAN 4 (How to respond to events and update the screen)\n// import { useState } from 'react';\n\n// // Komponen utama yang menampilkan dua tombol penghitung\n// export default function MyApp() {\n//   return (\n//     <div>\n//       <h1>Counters that update separately</h1>\n//       <MyButton />  {/* Tombol pertama */}\n//       <MyButton />  {/* Tombol kedua */}\n//     </div>\n//   );\n// }\n\n// // Komponen tombol penghitung\n// function MyButton() {\n//   // Mendeklarasikan state 'count' yang diset ke 0 pada awalnya\n//   const [count, setCount] = useState(0);\n\n//   // Fungsi event handler untuk merespons klik pada tombol\n//   function handleClick() {\n//     setCount(count + 1);  // Memperbarui nilai count setiap kali tombol diklik\n//   }\n\n//   return (\n//     // Tombol yang merespons klik dengan memanggil handleClick\n//     <button onClick={handleClick}>\n//       Clicked {count} times  {/* Menampilkan jumlah klik */}\n//     </button>\n//   );\n// }\n\n//PERCOBAAN 5 ()\nimport { useState } from 'react';\n// Komponen utama yang menampilkan dua tombol penghitung yang diperbarui bersamaan\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyApp() {\n  _s();\n  // Mendeklarasikan state 'count' dengan nilai awal 0\n  const [count, setCount] = useState(0);\n\n  // Fungsi event handler untuk menangani klik pada tombol\n  function handleClick() {\n    setCount(count + 1); // Memperbarui nilai count dengan menambahkan 1 setiap kali tombol diklik\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Penghitung yang diperbarui bersamaan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n      count: count,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(MyButton, {\n      count: count,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n// Komponen tombol yang menerima properti 'count' dan 'onClick' dari komponen induk (MyApp)\n_s(MyApp, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = MyApp;\nfunction MyButton({\n  count,\n  onClick\n}) {\n  return (\n    /*#__PURE__*/\n    // Tombol yang akan memanggil fungsi onClick saat diklik\n    _jsxDEV(\"button\", {\n      onClick: onClick,\n      children: [\"Diklik \", count, \" kali  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this)\n  );\n}\n_c2 = MyButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyApp\");\n$RefreshReg$(_c2, \"MyButton\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","MyApp","_s","count","setCount","handleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","MyButton","onClick","_c","_c2","$RefreshReg$"],"sources":["D:/KULIYAH NDU/MAGANG/belajar mandiri/week1/Desert_Tour/src/App.js"],"sourcesContent":["//PERCOBAAN 1 (Creating and nesting components )\r\n\r\n// function MyButton() {\r\n//   return (\r\n//     <button>\r\n//       Saya adalah tombol\r\n//     </button>\r\n//   );\r\n// }\r\n\r\n// export default function MyApp() {\r\n//   return (\r\n//     <div>\r\n//       <h1>Selamat datang di aplikasi saya</h1>\r\n//       <MyButton />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n//PERCOBAAN 2 (How to to add markup & styles Untuk mendisplay Data)\r\n\r\n// const user = {\r\n//   name: 'Nanda Kharisma Safitri',\r\n//   imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',\r\n//   imageSize: 90,\r\n// };\r\n\r\n// export default function Profile() {\r\n//   return (\r\n//     //markup\r\n//     <> \r\n//       <h1>{user.name}</h1>\r\n//       <img\r\n//         className=\"avatar\"\r\n//         src={user.imageUrl}\r\n//         alt={'Foto ' + user.name}\r\n//         style={{\r\n//           width: user.imageSize,\r\n//           height: user.imageSize\r\n//         }}\r\n//       />\r\n//     </>//markup\r\n//   );\r\n// }\r\n\r\n// PERCOBAAN 3 (How to render conditions and lists)\r\n// const products = [\r\n//   { title: 'Kubis', isFruit: false, id: 1 },  // Produk non-buah\r\n//   { title: 'Bawang Putih', isFruit: false, id: 2 },  // Produk non-buah\r\n//   { title: 'Apel', isFruit: true, id: 3 },  // Produk buah\r\n// ];\r\n\r\n// export default function ShoppingList() {\r\n//   // 1. Merender daftar produk menggunakan .map()\r\n//   //    - Di sini, `products.map()` digunakan untuk mengubah array `products` menjadi elemen-elemen <li> yang dapat ditampilkan dalam list.\r\n//   const listItems = products.map(product =>\r\n//     <li\r\n//       key={product.id}  // 2. Atribut key untuk mengidentifikasi item secara unik\r\n//       style={{\r\n//         // 3. Kondisi render: Memeriksa apakah produk adalah buah atau bukan dan mengubah warna teks berdasarkan kondisi tersebut.\r\n//         color: product.isFruit ? 'magenta' : 'darkgreen'  // Jika `isFruit` true, warna teks magenta, jika false, darkgreen.\r\n//       }}\r\n//     >\r\n//       {product.title}  {/* Menampilkan nama produk */}\r\n//     </li>\r\n//   );\r\n\r\n//   // 4. Merender daftar item sebagai <ul> dengan elemen <li> yang sudah dibuat sebelumnya\r\n//   return (\r\n//     <ul>{listItems}</ul>  // 5. Menampilkan seluruh daftar produk dalam sebuah unordered list (<ul>)\r\n//   );\r\n// }\r\n\r\n//PERCOBAAN 4 (How to respond to events and update the screen)\r\n// import { useState } from 'react';\r\n\r\n// // Komponen utama yang menampilkan dua tombol penghitung\r\n// export default function MyApp() {\r\n//   return (\r\n//     <div>\r\n//       <h1>Counters that update separately</h1>\r\n//       <MyButton />  {/* Tombol pertama */}\r\n//       <MyButton />  {/* Tombol kedua */}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// // Komponen tombol penghitung\r\n// function MyButton() {\r\n//   // Mendeklarasikan state 'count' yang diset ke 0 pada awalnya\r\n//   const [count, setCount] = useState(0);\r\n\r\n//   // Fungsi event handler untuk merespons klik pada tombol\r\n//   function handleClick() {\r\n//     setCount(count + 1);  // Memperbarui nilai count setiap kali tombol diklik\r\n//   }\r\n\r\n//   return (\r\n//     // Tombol yang merespons klik dengan memanggil handleClick\r\n//     <button onClick={handleClick}>\r\n//       Clicked {count} times  {/* Menampilkan jumlah klik */}\r\n//     </button>\r\n//   );\r\n// }\r\n\r\n//PERCOBAAN 5 ()\r\nimport { useState } from 'react';\r\n// Komponen utama yang menampilkan dua tombol penghitung yang diperbarui bersamaan\r\nexport default function MyApp() {\r\n  // Mendeklarasikan state 'count' dengan nilai awal 0\r\n  const [count, setCount] = useState(0);\r\n\r\n  // Fungsi event handler untuk menangani klik pada tombol\r\n  function handleClick() {\r\n    setCount(count + 1);  // Memperbarui nilai count dengan menambahkan 1 setiap kali tombol diklik\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Penghitung yang diperbarui bersamaan</h1>\r\n      {/* Menyediakan nilai count dan fungsi onClick ke kedua tombol */}\r\n      <MyButton count={count} onClick={handleClick} />  {/* Tombol pertama */}\r\n      <MyButton count={count} onClick={handleClick} />  {/* Tombol kedua */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Komponen tombol yang menerima properti 'count' dan 'onClick' dari komponen induk (MyApp)\r\nfunction MyButton({ count, onClick }) {\r\n  return (\r\n    // Tombol yang akan memanggil fungsi onClick saat diklik\r\n    <button onClick={onClick}>\r\n      Diklik {count} kali  {/* Menampilkan jumlah klik berdasarkan nilai count */}\r\n    </button>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,SAASO,WAAWA,CAAA,EAAG;IACrBD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,CAAC,CAAE;EACxB;;EAEA,oBACEH,OAAA;IAAAM,QAAA,gBACEN,OAAA;MAAAM,QAAA,EAAI;IAAoC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE7CV,OAAA,CAACW,QAAQ;MAACR,KAAK,EAAEA,KAAM;MAACS,OAAO,EAAEP;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,MAAE,eAClDV,OAAA,CAACW,QAAQ;MAACR,KAAK,EAAEA,KAAM;MAACS,OAAO,EAAEP;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,MAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV;;AAEA;AAAAR,EAAA,CAnBwBD,KAAK;AAAAY,EAAA,GAALZ,KAAK;AAoB7B,SAASU,QAAQA,CAAC;EAAER,KAAK;EAAES;AAAQ,CAAC,EAAE;EACpC;IAAA;IACE;IACAZ,OAAA;MAAQY,OAAO,EAAEA,OAAQ;MAAAN,QAAA,GAAC,SACjB,EAACH,KAAK,EAAC,SAAO;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf;EAAC;AAEb;AAACI,GAAA,GAPQH,QAAQ;AAAA,IAAAE,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}